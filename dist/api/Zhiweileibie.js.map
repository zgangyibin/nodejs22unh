{"version":3,"sources":["../../src/api/Zhiweileibie.js"],"names":["config","db","api","get","req","res","page","parseInt","query","limit","sort","order","where","zhiweileibie","indexOf","Op","like","eq","ZhiweileibieModel","findAndCountAll","offset","result","currPage","pageSize","toRes","session","post","Object","keys","body","forEach","item","create","userinfo","jwt","decode","headers","token","update","id","destroy","in","all","findOne","params","record","sql","type","remindstart","columnName","remindend","remindStart","util","getDateTimeFormat","Number","remindEnd","sequelize","plain","raw","QueryTypes","SELECT","results","count","xColumnName","yColumnName","timeStatType","tableName","dbConnection","dbtype","toLowerCase"],"mappings":"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","file":"Zhiweileibie.js","sourcesContent":["import { Router } from 'express'\r\nimport {Op, QueryTypes } from 'sequelize'\r\nimport sequelize from '../models/sequelize'//同步数据库\r\nimport toRes from '../lib/toRes'\r\nimport ZhiweileibieModel from '../models/ZhiweileibieModel'\r\nimport util from '../lib/util'\r\nimport jwt from 'jsonwebtoken'\r\n\r\nexport default ({ config, db }) => {\r\n\tlet api = Router();\r\n\r\n\t// 分页接口（后端）\r\n\tapi.get('/page', async (req, res) => {\r\n\t\ttry {\r\n\t\t\tlet page = parseInt(req.query.page) || 1//页\r\n\t\t\tlet limit = parseInt(req.query.limit) || 10//每页数据\r\n\t\t\tlet sort = req.query.sort || 'id'//排序参考\r\n\t\t\tlet order = req.query.order || 'asc'//升序\r\n\t\t\tlet where = {}\r\n\t\t\tlet zhiweileibie = req.query.zhiweileibie\r\n\t\t\tif (zhiweileibie) {\r\n\t\t\t\tif (zhiweileibie.indexOf('%') != -1) {\r\n\t\t\t\t\twhere.zhiweileibie = {\r\n\t\t\t\t\t\t[Op.like]: zhiweileibie//模糊查询\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\twhere.zhiweileibie = {\r\n\t\t\t\t\t\t[Op.eq]: zhiweileibie//准确查询\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tlet result = await ZhiweileibieModel.findAndCountAll({//会查出列表记录,同时返回符合查询列表数据的条数\r\n\t\t\t\torder: [[sort, order]],\r\n\t\t\t\twhere,\r\n\t\t\t\toffset: (page - 1) * limit,//offset = (当前页数 - 1) * 每页条数\r\n\t\t\t\tlimit//每页条数\r\n\t\t\t})\r\n\t\t\t\r\n\t\t\tresult.currPage = page\r\n\t\t\tresult.pageSize = limit\r\n\r\n\t\t\ttoRes.page(res, 0, result)\r\n\t\t} catch(err) {//服务器错误\r\n\t\t\ttoRes.session(res, 500, '服务器错误！', '', 500)\r\n\t\t}\r\n\t})\r\n\r\n    // 分页接口（前端）\r\n\tapi.get('/list', async (req, res) => {\r\n\t\ttry {\r\n\t\t\tlet page = parseInt(req.query.page) || 1\r\n\t\t\tlet limit = parseInt(req.query.limit) || 10\r\n\t\t\tlet sort = req.query.sort || 'id'\r\n\t\t\tlet order = req.query.order || 'asc'\r\n\t\t\tlet where = {}\r\n\t\t\tlet zhiweileibie = req.query.zhiweileibie\r\n\t\t\tif (zhiweileibie) {\r\n\t\t\t\tif (zhiweileibie.indexOf('%') != -1) {\r\n\t\t\t\t\twhere.zhiweileibie = {\r\n\t\t\t\t\t\t[Op.like]: zhiweileibie\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\twhere.zhiweileibie = {\r\n\t\t\t\t\t\t[Op.eq]: zhiweileibie\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\r\n\t\t\tlet result = await ZhiweileibieModel.findAndCountAll({\r\n\t\t\t\torder: [[sort, order]],\r\n\t\t\t\twhere,\r\n\t\t\t\toffset: (page - 1) * limit,\r\n\t\t\t\tlimit\r\n\t\t\t})\r\n\t\t\t\r\n\t\t\tresult.currPage = page\r\n\t\t\tresult.pageSize = limit\r\n\r\n\t\t\ttoRes.page(res, 0, result)\r\n\t\t} catch(err) {\r\n\t\t\ttoRes.session(res, 401, '您的权限不够！', '', 200)\r\n\t\t}\r\n\t})\r\n\r\n\r\n\t// 保存接口（后端）\r\n\tapi.post('/save', async (req, res) => {\r\n\t\ttry {\r\n\t\t\tObject.keys(req.body).forEach(item=>{\r\n\t\t\t\tif(req.body[item] == '')  delete req.body[item]\r\n\t\t\t})\r\n\r\n\t\t\tconst userinfo = await ZhiweileibieModel.create(req.body)//添加\r\n\r\n\t\t\tif (userinfo === null) {\r\n\t\t\t\ttoRes.session(res, -1, '添加失败！')\r\n\t\t\t} else {\r\n\t\t\t\ttoRes.session(res, 0, '添加成功！')\r\n\t\t\t}\r\n\t\t} catch(err) {\r\n\t\t\ttoRes.session(res, 500, '服务器错误！', '', 500)\r\n\t\t}\r\n\t})\r\n\r\n    // 保存接口（前端）\r\n\tapi.post('/add', async (req, res) => {\r\n\r\n\t\ttry {\r\n\r\n\t\t\tObject.keys(req.body).forEach(item=>{\r\n\t\t\t\tif(req.body[item] == '')  delete req.body[item]\r\n\t\t\t})\r\n\r\n\t\t\tif (jwt.decode(req.headers.token) == null) {//没找到token,没登录\r\n\t\t\t\ttoRes.session(res, 401, '请登录后再操作', '', 401)\r\n\t\t\t}\r\n\r\n\r\n\r\n\t\t\tconst userinfo = await ZhiweileibieModel.create(req.body)\r\n\r\n\t\t\tif (userinfo === null) {\r\n\r\n\t\t\t\ttoRes.session(res, -1, '添加失败！')\r\n\t\t\t} else {\r\n\r\n\t\t\t\ttoRes.session(res, 0, '添加成功！')\r\n\t\t\t}\r\n\t\t} catch(err) {\r\n\t\t\t\r\n\t\t\ttoRes.session(res, 500, '服务器错误！', '', 500)\r\n\t\t}\r\n\t})\r\n\r\n\t// 更新接口\r\n\tapi.post('/update', async (req, res) => {\r\n\r\n\t\ttry {\r\n\t\t\tawait ZhiweileibieModel.update(req.body, {\r\n\t\t\t\twhere: {\r\n\t\t\t\t  id: req.body.id || 0\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t\ttoRes.session(res, 0, '编辑成功！')\r\n\t\t} catch(err) {\r\n\t\t\ttoRes.session(res, 500, '服务器错误！', '', 500)\r\n\t\t}\r\n\t})\r\n\r\n\t// 删除接口\r\n\tapi.post('/delete', async (req, res) => {\r\n\r\n\t\ttry {\r\n\t\t\tawait ZhiweileibieModel.destroy({\r\n\t\t\t\twhere: {\r\n\t\t\t\t  id: {\r\n\t\t\t\t\t[Op.in]: req.body\r\n\t\t\t\t  }\r\n\t\t\t\t}\r\n\t\t\t})\r\n\r\n\t\t\ttoRes.session(res, 0, '删除成功！')\r\n\t\t} catch(err) {\r\n\t\t\ttoRes.session(res, 500, '服务器错误！', '', 500)\r\n\t\t}\r\n\t})\r\n\r\n\t// 详情接口（后端）\r\n\tapi.all('/info/:id', async (req, res) => {\r\n\r\n\t\ttry {\r\n\t\t\ttoRes.record(res, 0, await ZhiweileibieModel.findOne({ where: { id: req.params.id } }))\r\n\t\t} catch(err) {\r\n\r\n\t\t\ttoRes.session(res, 500, '服务器错误！', '', 500)\r\n\t\t}\r\n\t})\r\n\r\n    // 详情接口（前端）\r\n\tapi.all('/detail/:id', async (req, res) => {\r\n\r\n\t\ttry {\r\n\t\t\ttoRes.record(res, 0, await ZhiweileibieModel.findOne({ where: { id: req.params.id } }))\r\n\t\t} catch(err) {\r\n\t\t\ttoRes.session(res, 500, '服务器错误！', '', 500)\r\n\t\t}\r\n\t})\r\n\r\n\t// 获取需要提醒的记录数接口\r\n\tapi.get('/remind/:columnName/:type', async (req, res) => {\r\n\r\n\t\ttry {\r\n\t\t\tlet sql = 'SELECT 0 AS count'\r\n\t\t\t\r\n\t\t\tif (req.params.type == 1) {\r\n\t\t\t\tif (req.query.remindstart) sql = \"SELECT COUNT(*) AS count FROM zhiweileibie WHERE \" + req.params.columnName + \" >= '\" + req.query.remindstart + \"'\"\r\n\t\t\t\tif (req.query.remindend) sql = \"SELECT COUNT(*) AS count FROM zhiweileibie WHERE \" + req.params.columnName + \" <= '\" + req.query.remindend + \"'\"\r\n\r\n\t\t\t\tif (req.query.remindstart && req.query.remindend) {\r\n\t\t\t\t\tsql = \"SELECT COUNT(*) AS count FROM zhiweileibie WHERE \" + req.params.columnName + \" >= '\" + req.query.remindstart + \"' AND \" + req.params.columnName + \" <= '\" + req.query.remindend + \"'\"\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (req.params.type == 2) {//按日期\r\n\t\t\t\tif (req.query.remindstart) {\r\n\t\t\t\t\tlet remindStart = util.getDateTimeFormat(0 + Number(req.query.remindstart), \"yyyy-MM-dd\")\r\n\t\t\t\t\tsql = \"SELECT COUNT(*) AS count FROM zhiweileibie WHERE \" + req.params.columnName + \" >= '\" + remindStart + \"'\"\r\n\t\t\t\t}\r\n\t\t\t\tif (req.query.remindend) {\r\n\t\t\t\t\tlet remindEnd = util.getDateTimeFormat(req.query.remindend, \"yyyy-MM-dd\")\r\n\t\t\t\t\tsql = \"SELECT COUNT(*) AS count FROM zhiweileibie WHERE \" + req.params.columnName + \" <= '\" + remindEnd + \"'\"\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (req.query.remindstart && req.query.remindend) {\r\n\t\t\t\t\tlet remindStart = util.getDateTimeFormat(0 + Number(req.query.remindstart), \"yyyy-MM-dd\")\r\n\t\t\t\t\tlet remindEnd = util.getDateTimeFormat(req.query.remindend, \"yyyy-MM-dd\")\r\n\t\t\t\t\tsql = \"SELECT COUNT(*) AS count FROM zhiweileibie WHERE \" + req.params.columnName + \" >= '\" + remindStart + \"' AND \" + req.params.columnName + \" <= '\" + remindEnd + \"'\"\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tconst results = await sequelize.query(sql, {\r\n\t\t\t\tplain: true,//仅返回结果集的第一条记录\r\n\t\t\t\traw: true,//没有查询的模型定义\r\n\t\t\t\ttype: QueryTypes.SELECT\r\n\t\t\t})\r\n\t\t\ttoRes.count(res, 0, results.count)\r\n\t\t} catch(err) {\r\n\t\t\t\r\n\t\t\ttoRes.session(res, 500, '服务器错误！', '', 500)\r\n\t\t}\r\n\t})\r\n\r\n\t// 分组统计接口\r\n\tapi.get('/group/:columnName', async (req, res) => {\r\n\r\n\t\ttry {\r\n\t\t\tlet sql = \"\"\r\n\t\t\tlet columnName = req.params.columnName\r\n\t\t\tlet where = \" WHERE 1 = 1 \"\r\n\t\t\tsql = \"SELECT COUNT(*) AS total, \" + columnName + \" FROM zhiweileibie \" + where + \" GROUP BY \" + columnName + \" LIMIT 10\" //每组十条\r\n\t\t\ttoRes.record(res, 0, await sequelize.query(sql, {\r\n\t\t\t\tplain: false,//返回所有结果\r\n\t\t\t\traw: true,\r\n\t\t\t\ttype: QueryTypes.SELECT\r\n\t\t\t}))\r\n\t\t} catch(err) {\r\n\t\t\ttoRes.session(res, 500, '服务器错误！', '', 500)\r\n\t\t}\r\n\t})\r\n\r\n\t// 统计指定字段\r\n\tapi.get('/value/:xColumnName/:yColumnName', async (req, res) => {\r\n\r\n\t\ttry {\r\n\t\t\tlet sql = \"\"\r\n\t\t\tlet xColumnName = req.params.xColumnName\r\n\t\t\tlet yColumnName = req.params.yColumnName\r\n\t\t\tlet where = \" WHERE 1 = 1 \"\r\n\r\n\t\t\tsql = \"SELECT \" + xColumnName + \", SUM(\" + yColumnName + \") AS total FROM zhiweileibie \" + where + \" GROUP BY \" + xColumnName + \" DESC LIMIT 10\"\r\n\t\t\t\r\n\t\t\ttoRes.record(res, 0, await sequelize.query(sql, {\r\n\t\t\t\tplain: false,\r\n\t\t\t\traw: true,\r\n\t\t\t\ttype: QueryTypes.SELECT\r\n\t\t\t}))\r\n\t\t} catch(err) {\r\n\t\t\ttoRes.session(res, 500, '服务器错误！', '', 500)\r\n\t\t}\r\n\t})\r\n\r\n\t// 按日期统计\r\n\tapi.get('/value/:xColumnName/:yColumnName/:timeStatType', async (req, res) => {\r\n\r\n\t\ttry {\r\n\t\t\tlet sql = \"\"\r\n\t\t\tlet xColumnName = req.params.xColumnName\r\n\t\t\tlet yColumnName = req.params.yColumnName\r\n\t\t\tlet timeStatType = req.params.timeStatType\r\n\t\t\tlet tableName = \"zhiweileibie\"\r\n\t\t\tlet where = \" WHERE 1 = 1 \"\r\n\t\r\n            if (config.dbConnection.dbtype.toLowerCase() == \"mysql\") {\r\n                if (timeStatType == \"日\")\r\n                    sql = \"SELECT DATE_FORMAT(\" + xColumnName + \", '%Y-%m-%d') \" + xColumnName + \", sum(\" + yColumnName + \") total FROM \" + tableName + where + \" GROUP BY DATE_FORMAT(\" + xColumnName + \", '%Y-%m-%d') LIMIT 10\";\r\n                if (timeStatType == \"月\")\r\n                    sql = \"SELECT DATE_FORMAT(\" + xColumnName + \", '%Y-%m') \" + xColumnName + \", sum(\" + yColumnName + \") total FROM \" + tableName + where + \" GROUP BY DATE_FORMAT(\" + xColumnName + \", '%Y-%m')  LIMIT 10\";\r\n                if (timeStatType == \"年\")\r\n                    sql = \"SELECT DATE_FORMAT(\" + xColumnName + \", '%Y') \" + xColumnName + \", sum(\" + yColumnName + \") total FROM \" + tableName + where + \" GROUP BY DATE_FORMAT(\" + xColumnName + \", '%Y')  LIMIT 10\";\r\n            } else {\r\n                if (timeStatType == \"日\")\r\n                    sql = \"SELECT DATE_FORMAT(VARCHAR(10),\" + xColumnName + \", 120) \" + xColumnName + \", sum(\" + yColumnName + \") total FROM \" + tableName + where + \" GROUP BY DATE_FORMAT(VARCHAR(10),\" + xColumnName + \", 120)  LIMIT 10\";\r\n                if (timeStatType == \"月\")\r\n                    sql = \"SELECT DATE_FORMAT(VARCHAR(7),\" + xColumnName + \", 120) \" + xColumnName + \", sum(\" + yColumnName + \") total FROM \" + tableName + where + \" GROUP BY DATE_FORMAT(VARCHAR(7),\" + xColumnName + \", 120)  LIMIT 10\";\r\n                if (timeStatType == \"年\")\r\n                    sql = \"SELECT DATE_FORMAT(VARCHAR(4),\" + xColumnName + \", 120) \" + xColumnName + \", sum(\" + yColumnName + \") total FROM \" + tableName + where + \" GROUP BY DATE_FORMAT(VARCHAR(4),\" + xColumnName + \", 120)  LIMIT 10\";\r\n            }\r\n\t\t\ttoRes.record(res, 0, await sequelize.query(sql, {\r\n\t\t\t\tplain: false,\r\n\t\t\t\traw: true,\r\n\t\t\t\ttype: QueryTypes.SELECT\r\n\t\t\t}))\r\n\t\t} catch(err) {\r\n\r\n\t\t\ttoRes.session(res, 500, '服务器错误！', '', 500)\r\n\t\t}\r\n\t})\r\n\r\n\treturn api\r\n}\r\n"]}