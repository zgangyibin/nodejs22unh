{"version":3,"sources":["../src/index.js"],"names":["app","server","http","createServer","use","exposedHeaders","config","corsHeaders","bodyParser","json","limit","bodyLimit","secret","sessionSecret","resave","saveUninitialized","projectName","express","static","path","join","__dirname","jwtSecret","algorithms","credentialsRequired","getToken","req","util","isNothing","headers","token","requestProperty","unless","url","methods","err","res","next","name","status","code","msg","db","listen","port","console","log","address"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAJ+B;AAFa;AAFrB;AAUvB,IAAIA,MAAM,wBAAV,C,CALgC;AAFI;AAFA;AAFP;;AAY7BA,IAAIC,MAAJ,GAAaC,eAAKC,YAAL,CAAkBH,GAAlB,CAAb;;AAEAA,IAAII,GAAJ,CAAQ,oBAAK,EAAC;AACbC,iBAAgBC,iBAAOC,WADX,CACsB;AADtB,CAAL,CAAR;;AAIAP,IAAII,GAAJ,CAAQI,qBAAWC,IAAX,CAAgB;AACvBC,QAAQJ,iBAAOK,SADQ,CACC;AADD,CAAhB,CAAR;;AAIAX,IAAII,GAAJ,CAAQ,8BAAe;AACtBQ,SAAQN,iBAAOO,aADO,EACO;AAC7BC,SAAQ,KAFc,EAER;AACdC,oBAAmB,IAHG,CAGC;AAHD,CAAf,CAAR;;AAMAf,IAAII,GAAJ,CAAQ,MAAME,iBAAOU,WAArB,EAAkCC,kBAAQC,MAAR,CAAeC,eAAKC,IAAL,CAAUC,SAAV,EAAqB,OAArB,CAAf,CAAlC,E,CAAgF;;AAEhFrB,IAAII,GAAJ,CAAQ,0BAAW;AAClBQ,SAAQN,iBAAOgB,SADG,EACO;AACzBC,aAAY,CAAC,OAAD,CAFM,EAEI;AACtBC,sBAAqB,IAHH,EAGQ;AAC1BC,SAJkB,oBAIRC,GAJQ,EAIH;AACd,SAAOC,eAAKC,SAAL,CAAeF,IAAIG,OAAJ,CAAYC,KAA3B,IAAoC,IAApC,GAA2CJ,IAAIG,OAAJ,CAAYC,KAA9D;AACA,EANiB;;AAOlBC,kBAAiB;AAPC,CAAX,EAQLC,MARK,CAQE,EAAC;AACVb,OAAM,CACL;AACCc,OAAK,wGADN;AAECC,WAAS,CAAC,KAAD,EAAQ,MAAR;AAFV,EADK,EAKL;AACCD,OAAK,sGADN;AAECC,WAAS,CAAC,KAAD,EAAQ,MAAR;AAFV,EALK;AADG,CARF,CAAR;;AAqBAlC,IAAII,GAAJ,CAAQ,UAAC+B,GAAD,EAAMT,GAAN,EAAWU,GAAX,EAAgBC,IAAhB,EAAyB;AAChC,KAAIF,IAAIG,IAAJ,KAAa,mBAAjB,EAAsC;AACrCF,MAAIG,MAAJ,CAAW,GAAX,EAAgB9B,IAAhB,CAAqB;AACpB+B,SAAM,GADc;AAEpBC,QAAK;AAFe,GAArB;AAIA;AACD,CAPD;;AASA,kBAAc,cAAM;AACnBzC,KAAII,GAAJ,CAAQ,qBAAW,EAAEE,wBAAF,EAAUoC,MAAV,EAAX,CAAR,EADmB,CACgB;AACnC1C,KAAII,GAAJ,CAAQ,MAAME,iBAAOU,WAArB,EAAkC,mBAAI,EAAEV,wBAAF,EAAUoC,MAAV,EAAJ,CAAlC;AACA1C,KAAIC,MAAJ,CAAW0C,MAAX,CAAkBrC,iBAAOsC,IAAzB,EAA+B,YAAM;AACpCC,UAAQC,GAAR,sBAA+B9C,IAAIC,MAAJ,CAAW8C,OAAX,GAAqBH,IAApD;AACA,EAFD;AAGA,CAND;;kBAQe5C,G","file":"index.js","sourcesContent":["import http from 'http'\nimport path from 'path'\nimport express from 'express'//框架\nimport cors from 'cors'//跨域\nimport bodyParser from 'body-parser'//把post数据放入body里\nimport expressSession from 'express-session'//session是保存在服务器上的数据\nimport expressJWT from 'express-jwt'//是将用户信息保存到一个Json字符串中，然后进行编码后得到一个JWT token\nimport initializeDb from './db'//连接数据库后回调函数\nimport middleware from './store'//路由\nimport api from './api'\nimport config from './config.json'\nimport util from './lib/util'\n\nlet app = express()\napp.server = http.createServer(app)\n\napp.use(cors({//跨域\n\texposedHeaders: config.corsHeaders//配置Access-Control-Expose-Headers CORS标头\n}))\n\napp.use(bodyParser.json({\n\tlimit : config.bodyLimit//数据大小\n}))\n\napp.use(expressSession({\n\tsecret: config.sessionSecret,//服务端生成session的签名\n\tresave: false,//强制保存session\n\tsaveUninitialized: true//强制将为初始化的session存储\n}))\n\napp.use('/' + config.projectName, express.static(path.join(__dirname, 'views')))//静态配置文件\n\napp.use(expressJWT({\n\tsecret: config.jwtSecret,//加密秘钥\n\talgorithms: [\"HS256\"],//加密算法\n\tcredentialsRequired: true,//校验\n\tgetToken (req) {\n\t\treturn util.isNothing(req.headers.token) ? null : req.headers.token\n\t},\n\trequestProperty: 'xiezn'\n}).unless({//不需要校验的路径\n\tpath: [\n\t\t{\n\t\t\turl: /.*\\/(login|register|upload|download|resetPass|autoSort|list|sendemail|notify|update|security|sendsms)$/,\n\t\t\tmethods: ['GET', 'POST']\n\t\t},\n\t\t{\n\t\t\turl: /.*\\/(config|option|follow|sh|remind|cal|group|value|news|info|detail|forum|updateBrowseDuration)\\/.*/,\n\t\t\tmethods: ['GET', 'POST']\n\t\t}\n\t]\n}))\n\napp.use((err, req, res, next) => {\n\tif (err.name === 'UnauthorizedError') {\n\t\tres.status(200).json({\n\t\t\tcode: 401,\n\t\t\tmsg: '您的权限不够！'\n\t\t})\n\t}\n})\n\ninitializeDb( db => {\n\tapp.use(middleware({ config, db }))//路由\n\tapp.use('/' + config.projectName, api({ config, db }))\n\tapp.server.listen(config.port, () => {\n\t\tconsole.log(`Started on port ${app.server.address().port}`)\n\t})\n})\n\nexport default app\n"]}