{"version":3,"sources":["../../../../../../../src/views/front/components/zebra-swiper/libs/translate/setTranslate.js"],"names":["setTranslate","translate","byController","swiper","rtl","rtlTranslate","params","$wrapperEl","wrapperEl","progress","x","y","z","isNaN","isHorizontal","roundLengths","Math","floor","cssMode","virtualTranslate","transform","previousTranslate","newProgress","translatesDiff","maxTranslate","minTranslate","updateProgress","emit"],"mappings":";;;;;kBAAwBA,Y;AAAT,SAASA,YAAT,CAAsBC,SAAtB,EAAiCC,YAAjC,EAA+C;AAC7D,KAAMC,SAAS,IAAf;AAD6D,KAG9CC,GAH8C,GAQzDD,MARyD,CAG5DE,YAH4D;AAAA,KAI5DC,MAJ4D,GAQzDH,MARyD,CAI5DG,MAJ4D;AAAA,KAK5DC,UAL4D,GAQzDJ,MARyD,CAK5DI,UAL4D;AAAA,KAM5DC,SAN4D,GAQzDL,MARyD,CAM5DK,SAN4D;AAAA,KAO5DC,QAP4D,GAQzDN,MARyD,CAO5DM,QAP4D;;AAS7D,KAAIC,IAAI,CAAR;AACA,KAAIC,IAAI,CAAR;AACA,KAAMC,IAAI,CAAV;AACA,KAAIC,MAAMZ,SAAN,CAAJ,EAAsB;AACrB;AACA;AACD,KAAI,CAACM,UAAL,EAAiB;AACjB,KAAIJ,OAAOW,YAAP,EAAJ,EAA2B;AAC1BJ,MAAIN,MAAM,CAACH,SAAP,GAAmBA,SAAvB;AACA,EAFD,MAEO;AACNU,MAAIV,SAAJ;AACA;;AAED,KAAIK,OAAOS,YAAX,EAAyB;AACxBL,MAAIM,KAAKC,KAAL,CAAWP,CAAX,CAAJ;AACAC,MAAIK,KAAKC,KAAL,CAAWN,CAAX,CAAJ;AACA;;AAED,KAAIL,OAAOY,OAAX,EAAoB;AACnBV,YAAUL,OAAOW,YAAP,KAAwB,YAAxB,GAAuC,WAAjD,IAAgEX,OAAOW,YAAP,KAAwB,CAACJ,CAAzB,GAA6B,CAACC,CAA9F;AACA,EAFD,MAEO,IAAI,CAACL,OAAOa,gBAAZ,EAA8B;AACpCZ,aAAWa,SAAX,kBAAoCV,CAApC,YAA4CC,CAA5C,YAAoDC,CAApD;AACA;;AAEDT,QAAOkB,iBAAP,GAA2BlB,OAAOF,SAAlC;AACAE,QAAOF,SAAP,GAAmBE,OAAOW,YAAP,KAAwBJ,CAAxB,GAA4BC,CAA/C,CAlC6D,CAkCX;;AAElD,KAAIW,oBAAJ;AACA,KAAMC,iBAAiBpB,OAAOqB,YAAP,KAAwBrB,OAAOsB,YAAP,EAA/C;;AAEA,KAAIF,mBAAmB,CAAvB,EAA0B;AACzBD,gBAAc,CAAd;AACA,EAFD,MAEO;AACNA,gBAAc,CAACrB,YAAYE,OAAOsB,YAAP,EAAb,IAAsCF,cAApD;AACA;;AAED,KAAID,gBAAgBb,QAApB,EAA8B;AAC7BN,SAAOuB,cAAP,CAAsBzB,SAAtB;AACA;;AAEDE,QAAOwB,IAAP,CAAY,cAAZ,EAA4BxB,OAAOF,SAAnC,EAA8CC,YAA9C;AACA","file":"setTranslate.js","sourcesContent":["export default function setTranslate(translate, byController) {\r\n\tconst swiper = this;\r\n\tconst {\r\n\t\trtlTranslate: rtl,\r\n\t\tparams,\r\n\t\t$wrapperEl,\r\n\t\twrapperEl,\r\n\t\tprogress\r\n\t} = swiper;\r\n\tlet x = 0;\r\n\tlet y = 0;\r\n\tconst z = 0;\r\n\tif (isNaN(translate)) {\r\n\t\treturn\r\n\t}\r\n\tif (!$wrapperEl) return\r\n\tif (swiper.isHorizontal()) {\r\n\t\tx = rtl ? -translate : translate;\r\n\t} else {\r\n\t\ty = translate;\r\n\t}\r\n\r\n\tif (params.roundLengths) {\r\n\t\tx = Math.floor(x);\r\n\t\ty = Math.floor(y);\r\n\t}\r\n\r\n\tif (params.cssMode) {\r\n\t\twrapperEl[swiper.isHorizontal() ? 'scrollLeft' : 'scrollTop'] = swiper.isHorizontal() ? -x : -y;\r\n\t} else if (!params.virtualTranslate) {\r\n\t\t$wrapperEl.transform(`translate3d(${x}px, ${y}px, ${z}px)`);\r\n\t}\r\n\r\n\tswiper.previousTranslate = swiper.translate;\r\n\tswiper.translate = swiper.isHorizontal() ? x : y; // Check if we need to update progress\r\n\r\n\tlet newProgress;\r\n\tconst translatesDiff = swiper.maxTranslate() - swiper.minTranslate();\r\n\r\n\tif (translatesDiff === 0) {\r\n\t\tnewProgress = 0;\r\n\t} else {\r\n\t\tnewProgress = (translate - swiper.minTranslate()) / translatesDiff;\r\n\t}\r\n\r\n\tif (newProgress !== progress) {\r\n\t\tswiper.updateProgress(translate);\r\n\t}\r\n\r\n\tswiper.emit('setTranslate', swiper.translate, byController);\r\n}\n"]}