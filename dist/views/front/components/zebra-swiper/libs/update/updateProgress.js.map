{"version":3,"sources":["../../../../../../../src/views/front/components/zebra-swiper/libs/update/updateProgress.js"],"names":["updateProgress","translate","swiper","multiplier","rtlTranslate","params","translatesDiff","maxTranslate","minTranslate","progress","isBeginning","isEnd","wasBeginning","wasEnd","Object","assign","watchSlidesProgress","centeredSlides","autoHeight","updateSlidesProgress","emit"],"mappings":";;;;;kBAAwBA,c;AAAT,SAASA,cAAT,CAAwBC,SAAxB,EAAmC;AAChD,MAAMC,SAAS,IAAf;;AAEA,MAAI,OAAOD,SAAP,KAAqB,WAAzB,EAAsC;AACpC,QAAME,aAAaD,OAAOE,YAAP,GAAsB,CAAC,CAAvB,GAA2B,CAA9C,CADoC,CACa;;AAEjDH,gBAAYC,UAAUA,OAAOD,SAAjB,IAA8BC,OAAOD,SAAP,GAAmBE,UAAjD,IAA+D,CAA3E;AACD;;AAED,MAAME,SAASH,OAAOG,MAAtB;AACA,MAAMC,iBAAiBJ,OAAOK,YAAP,KAAwBL,OAAOM,YAAP,EAA/C;AAVgD,MAY9CC,QAZ8C,GAe5CP,MAf4C,CAY9CO,QAZ8C;AAAA,MAa9CC,WAb8C,GAe5CR,MAf4C,CAa9CQ,WAb8C;AAAA,MAc9CC,KAd8C,GAe5CT,MAf4C,CAc9CS,KAd8C;;AAgBhD,MAAMC,eAAeF,WAArB;AACA,MAAMG,SAASF,KAAf;;AAEA,MAAIL,mBAAmB,CAAvB,EAA0B;AACxBG,eAAW,CAAX;AACAC,kBAAc,IAAd;AACAC,YAAQ,IAAR;AACD,GAJD,MAIO;AACLF,eAAW,CAACR,YAAYC,OAAOM,YAAP,EAAb,IAAsCF,cAAjD;AACAI,kBAAcD,YAAY,CAA1B;AACAE,YAAQF,YAAY,CAApB;AACD;;AAEDK,SAAOC,MAAP,CAAcb,MAAd,EAAsB;AACpBO,sBADoB;AAEpBC,4BAFoB;AAGpBC;AAHoB,GAAtB;AAKA,MAAIN,OAAOW,mBAAP,IAA8BX,OAAOY,cAAP,IAAyBZ,OAAOa,UAAlE,EAA8EhB,OAAOiB,oBAAP,CAA4BlB,SAA5B;;AAE9E,MAAIS,eAAe,CAACE,YAApB,EAAkC;AAChCV,WAAOkB,IAAP,CAAY,uBAAZ;AACD;;AAED,MAAIT,SAAS,CAACE,MAAd,EAAsB;AACpBX,WAAOkB,IAAP,CAAY,iBAAZ;AACD;;AAED,MAAIR,gBAAgB,CAACF,WAAjB,IAAgCG,UAAU,CAACF,KAA/C,EAAsD;AACpDT,WAAOkB,IAAP,CAAY,UAAZ;AACD;;AAEDlB,SAAOkB,IAAP,CAAY,UAAZ,EAAwBX,QAAxB;AACD","file":"updateProgress.js","sourcesContent":["export default function updateProgress(translate) {\n  const swiper = this;\n\n  if (typeof translate === 'undefined') {\n    const multiplier = swiper.rtlTranslate ? -1 : 1; // eslint-disable-next-line\n\n    translate = swiper && swiper.translate && swiper.translate * multiplier || 0;\n  }\n\n  const params = swiper.params;\n  const translatesDiff = swiper.maxTranslate() - swiper.minTranslate();\n  let {\n    progress,\n    isBeginning,\n    isEnd\n  } = swiper;\n  const wasBeginning = isBeginning;\n  const wasEnd = isEnd;\n\n  if (translatesDiff === 0) {\n    progress = 0;\n    isBeginning = true;\n    isEnd = true;\n  } else {\n    progress = (translate - swiper.minTranslate()) / translatesDiff;\n    isBeginning = progress <= 0;\n    isEnd = progress >= 1;\n  }\n\n  Object.assign(swiper, {\n    progress,\n    isBeginning,\n    isEnd\n  });\n  if (params.watchSlidesProgress || params.centeredSlides && params.autoHeight) swiper.updateSlidesProgress(translate);\n\n  if (isBeginning && !wasBeginning) {\n    swiper.emit('reachBeginning toEdge');\n  }\n\n  if (isEnd && !wasEnd) {\n    swiper.emit('reachEnd toEdge');\n  }\n\n  if (wasBeginning && !isBeginning || wasEnd && !isEnd) {\n    swiper.emit('fromEdge');\n  }\n\n  swiper.emit('progress', progress);\n}"]}