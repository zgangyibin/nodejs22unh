{"version":3,"sources":["../../src/api/Aboutus.js"],"names":["config","db","api","get","req","res","page","parseInt","query","limit","sort","order","where","title","indexOf","Op","like","eq","subtitle","content","picture1","picture2","picture3","AboutusModel","findAndCountAll","offset","result","currPage","pageSize","toRes","session","post","Object","keys","body","forEach","item","create","userinfo","jwt","decode","headers","token","update","id","destroy","in","all","findOne","params","record","sql","type","remindstart","columnName","remindend","remindStart","util","getDateTimeFormat","Number","remindEnd","sequelize","plain","raw","QueryTypes","SELECT","results","count","xColumnName","yColumnName","timeStatType","tableName","dbConnection","dbtype","toLowerCase"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;kBAEe,gBAAoB;AAAA,KAAjBA,MAAiB,QAAjBA,MAAiB;AAAA,KAATC,EAAS,QAATA,EAAS;;AAClC,KAAIC,MAAM,sBAAV;;AAEA;AACAA,KAAIC,GAAJ,CAAQ,OAAR;AAAA,uFAAiB,iBAAOC,GAAP,EAAYC,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIXC,WAJW,GAIJC,SAASH,IAAII,KAAJ,CAAUF,IAAnB,KAA4B,CAJxB;AAKXG,YALW,GAKHF,SAASH,IAAII,KAAJ,CAAUC,KAAnB,KAA6B,EAL1B;AAMXC,WANW,GAMJN,IAAII,KAAJ,CAAUE,IAAV,IAAkB,IANd;AAOXC,YAPW,GAOHP,IAAII,KAAJ,CAAUG,KAAV,IAAmB,KAPhB;AASXC,YATW,GASH,EATG;AAUXC,YAVW,GAUHT,IAAII,KAAJ,CAAUK,KAVP;;AAWf,WAAIA,KAAJ,EAAW;;AAEV,YAAIA,MAAMC,OAAN,CAAc,GAAd,KAAsB,CAAC,CAA3B,EAA8B;AAC7BF,eAAMC,KAAN,qCACEE,cAAGC,IADL,EACYH,KADZ;AAGA,SAJD,MAIO;AACND,eAAMC,KAAN,qCACEE,cAAGE,EADL,EACUJ,KADV;AAGA;AACD;AACGK,eAvBW,GAuBAd,IAAII,KAAJ,CAAUU,QAvBV;;AAwBf,WAAIA,QAAJ,EAAc;;AAEb,YAAIA,SAASJ,OAAT,CAAiB,GAAjB,KAAyB,CAAC,CAA9B,EAAiC;AAChCF,eAAMM,QAAN,qCACEH,cAAGC,IADL,EACYE,QADZ;AAGA,SAJD,MAIO;AACNN,eAAMM,QAAN,qCACEH,cAAGE,EADL,EACUC,QADV;AAGA;AACD;AACGC,cApCW,GAoCDf,IAAII,KAAJ,CAAUW,OApCT;;AAqCf,WAAIA,OAAJ,EAAa;;AAEZ,YAAIA,QAAQL,OAAR,CAAgB,GAAhB,KAAwB,CAAC,CAA7B,EAAgC;AAC/BF,eAAMO,OAAN,qCACEJ,cAAGC,IADL,EACYG,OADZ;AAGA,SAJD,MAIO;AACNP,eAAMO,OAAN,qCACEJ,cAAGE,EADL,EACUE,OADV;AAGA;AACD;AACGC,eAjDW,GAiDAhB,IAAII,KAAJ,CAAUY,QAjDV;;AAkDf,WAAIA,QAAJ,EAAc;;AAEb,YAAIA,SAASN,OAAT,CAAiB,GAAjB,KAAyB,CAAC,CAA9B,EAAiC;AAChCF,eAAMQ,QAAN,qCACEL,cAAGC,IADL,EACYI,QADZ;AAGA,SAJD,MAIO;AACNR,eAAMQ,QAAN,qCACEL,cAAGE,EADL,EACUG,QADV;AAGA;AACD;AACGC,eA9DW,GA8DAjB,IAAII,KAAJ,CAAUa,QA9DV;;AA+Df,WAAIA,QAAJ,EAAc;;AAEb,YAAIA,SAASP,OAAT,CAAiB,GAAjB,KAAyB,CAAC,CAA9B,EAAiC;AAChCF,eAAMS,QAAN,qCACEN,cAAGC,IADL,EACYK,QADZ;AAGA,SAJD,MAIO;AACNT,eAAMS,QAAN,qCACEN,cAAGE,EADL,EACUI,QADV;AAGA;AACD;AACGC,eA3EW,GA2EAlB,IAAII,KAAJ,CAAUc,QA3EV;;AA4Ef,WAAIA,QAAJ,EAAc;;AAEb,YAAIA,SAASR,OAAT,CAAiB,GAAjB,KAAyB,CAAC,CAA9B,EAAiC;AAChCF,eAAMU,QAAN,qCACEP,cAAGC,IADL,EACYM,QADZ;AAGA,SAJD,MAIO;AACNV,eAAMU,QAAN,qCACEP,cAAGE,EADL,EACUK,QADV;AAGA;AACD;;AAvFc;AAAA,cAyFIC,uBAAaC,eAAb,CAA6B;AAC/Cb,eAAO,CAAC,CAACD,IAAD,EAAOC,KAAP,CAAD,CADwC;AAE/CC,oBAF+C;AAG/Ca,gBAAQ,CAACnB,OAAO,CAAR,IAAaG,KAH0B;AAI/CA;AAJ+C,QAA7B,CAzFJ;;AAAA;AAyFXiB,aAzFW;;;AAgGfA,cAAOC,QAAP,GAAkBrB,IAAlB;AACAoB,cAAOE,QAAP,GAAkBnB,KAAlB;;AAEAoB,uBAAMvB,IAAN,CAAWD,GAAX,EAAgB,CAAhB,EAAmBqB,MAAnB;AAnGe;AAAA;;AAAA;AAAA;AAAA;;;AAsGfG,uBAAMC,OAAN,CAAczB,GAAd,EAAmB,GAAnB,EAAwB,QAAxB,EAAkC,EAAlC,EAAsC,GAAtC;;AAtGe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAjB;;AAAA;AAAA;AAAA;AAAA;;AA0GG;AACHH,KAAIC,GAAJ,CAAQ,OAAR;AAAA,uFAAiB,kBAAOC,GAAP,EAAYC,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIXC,WAJW,GAIJC,SAASH,IAAII,KAAJ,CAAUF,IAAnB,KAA4B,CAJxB;AAKXG,YALW,GAKHF,SAASH,IAAII,KAAJ,CAAUC,KAAnB,KAA6B,EAL1B;AAMXC,WANW,GAMJN,IAAII,KAAJ,CAAUE,IAAV,IAAkB,IANd;AAOXC,YAPW,GAOHP,IAAII,KAAJ,CAAUG,KAAV,IAAmB,KAPhB;AASXC,YATW,GASH,EATG;AAUXC,YAVW,GAUHT,IAAII,KAAJ,CAAUK,KAVP;;AAWf,WAAIA,KAAJ,EAAW;;AAEV,YAAIA,MAAMC,OAAN,CAAc,GAAd,KAAsB,CAAC,CAA3B,EAA8B;AAC7BF,eAAMC,KAAN,qCACEE,cAAGC,IADL,EACYH,KADZ;AAGA,SAJD,MAIO;AACND,eAAMC,KAAN,qCACEE,cAAGE,EADL,EACUJ,KADV;AAGA;AACD;;AAtBc;AAAA,cAyBIU,uBAAaC,eAAb,CAA6B;AAC/Cb,eAAO,CAAC,CAACD,IAAD,EAAOC,KAAP,CAAD,CADwC;AAE/CC,oBAF+C;AAG/Ca,gBAAQ,CAACnB,OAAO,CAAR,IAAaG,KAH0B;AAI/CA;AAJ+C,QAA7B,CAzBJ;;AAAA;AAyBXiB,aAzBW;;;AAgCfA,cAAOC,QAAP,GAAkBrB,IAAlB;AACAoB,cAAOE,QAAP,GAAkBnB,KAAlB;;AAEAoB,uBAAMvB,IAAN,CAAWD,GAAX,EAAgB,CAAhB,EAAmBqB,MAAnB;AAnCe;AAAA;;AAAA;AAAA;AAAA;;;AAsCfG,uBAAMC,OAAN,CAAczB,GAAd,EAAmB,GAAnB,EAAwB,SAAxB,EAAmC,EAAnC,EAAuC,GAAvC;;AAtCe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAjB;;AAAA;AAAA;AAAA;AAAA;;AA2CA;AACAH,KAAI6B,IAAJ,CAAS,OAAT;AAAA,uFAAkB,kBAAO3B,GAAP,EAAYC,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAIhB2B,cAAOC,IAAP,CAAY7B,IAAI8B,IAAhB,EAAsBC,OAAtB,CAA8B,gBAAM;AACnC,YAAG/B,IAAI8B,IAAJ,CAASE,IAAT,KAAkB,EAArB,EAA0B,OAAOhC,IAAI8B,IAAJ,CAASE,IAAT,CAAP;AAC1B,QAFD;;AAJgB;AAAA,cAQOb,uBAAac,MAAb,CAAoBjC,IAAI8B,IAAxB,CARP;;AAAA;AAQVI,eARU;;;AAUhB,WAAIA,aAAa,IAAjB,EAAuB;AACtBT,wBAAMC,OAAN,CAAczB,GAAd,EAAmB,CAAC,CAApB,EAAuB,OAAvB;AACA,QAFD,MAEO;AACNwB,wBAAMC,OAAN,CAAczB,GAAd,EAAmB,CAAnB,EAAsB,OAAtB;AACA;AAde;AAAA;;AAAA;AAAA;AAAA;;AAgBhBwB,uBAAMC,OAAN,CAAczB,GAAd,EAAmB,GAAnB,EAAwB,QAAxB,EAAkC,EAAlC,EAAsC,GAAtC;;AAhBgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAlB;;AAAA;AAAA;AAAA;AAAA;;AAoBG;AACHH,KAAI6B,IAAJ,CAAS,MAAT;AAAA,uFAAiB,kBAAO3B,GAAP,EAAYC,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAIf2B,cAAOC,IAAP,CAAY7B,IAAI8B,IAAhB,EAAsBC,OAAtB,CAA8B,gBAAM;AACnC,YAAG/B,IAAI8B,IAAJ,CAASE,IAAT,KAAkB,EAArB,EAA0B,OAAOhC,IAAI8B,IAAJ,CAASE,IAAT,CAAP;AAC1B,QAFD;;AAIA,WAAIG,uBAAIC,MAAJ,CAAWpC,IAAIqC,OAAJ,CAAYC,KAAvB,KAAiC,IAArC,EAA2C;AAAC;AAC3Cb,wBAAMC,OAAN,CAAczB,GAAd,EAAmB,GAAnB,EAAwB,SAAxB,EAAmC,EAAnC,EAAuC,GAAvC;AACA;;AAVc;AAAA,cAYQkB,uBAAac,MAAb,CAAoBjC,IAAI8B,IAAxB,CAZR;;AAAA;AAYTI,eAZS;;;AAcf,WAAIA,aAAa,IAAjB,EAAuB;AACtBT,wBAAMC,OAAN,CAAczB,GAAd,EAAmB,CAAC,CAApB,EAAuB,OAAvB;AACA,QAFD,MAEO;AACNwB,wBAAMC,OAAN,CAAczB,GAAd,EAAmB,CAAnB,EAAsB,OAAtB;AACA;AAlBc;AAAA;;AAAA;AAAA;AAAA;;AAoBfwB,uBAAMC,OAAN,CAAczB,GAAd,EAAmB,GAAnB,EAAwB,QAAxB,EAAkC,EAAlC,EAAsC,GAAtC;;AApBe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAjB;;AAAA;AAAA;AAAA;AAAA;;AAwBA;AACAH,KAAI6B,IAAJ,CAAS,SAAT;AAAA,uFAAoB,kBAAO3B,GAAP,EAAYC,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAGZkB,uBAAaoB,MAAb,CAAoBvC,IAAI8B,IAAxB,EAA8B;AACnCtB,eAAO;AACLgC,aAAIxC,IAAI8B,IAAJ,CAASU,EAAT,IAAe;AADd;AAD4B,QAA9B,CAHY;;AAAA;;AASlBf,uBAAMC,OAAN,CAAczB,GAAd,EAAmB,CAAnB,EAAsB,OAAtB;AATkB;AAAA;;AAAA;AAAA;AAAA;;AAWlBwB,uBAAMC,OAAN,CAAczB,GAAd,EAAmB,GAAnB,EAAwB,QAAxB,EAAkC,EAAlC,EAAsC,GAAtC;;AAXkB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAApB;;AAAA;AAAA;AAAA;AAAA;;AAeA;AACAH,KAAI6B,IAAJ,CAAS,SAAT;AAAA,uFAAoB,kBAAO3B,GAAP,EAAYC,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAIZkB,uBAAasB,OAAb,CAAqB;AAC1BjC,eAAO;AACLgC,+CACA7B,cAAG+B,EADH,EACQ1C,IAAI8B,IADZ;AADK;AADmB,QAArB,CAJY;;AAAA;;AAYlBL,uBAAMC,OAAN,CAAczB,GAAd,EAAmB,CAAnB,EAAsB,OAAtB;AAZkB;AAAA;;AAAA;AAAA;AAAA;;AAclBwB,uBAAMC,OAAN,CAAczB,GAAd,EAAmB,GAAnB,EAAwB,QAAxB,EAAkC,EAAlC,EAAsC,GAAtC;;AAdkB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAApB;;AAAA;AAAA;AAAA;AAAA;;AAkBA;AACAH,KAAI6C,GAAJ,CAAQ,WAAR;AAAA,uFAAqB,kBAAO3C,GAAP,EAAYC,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAInBwB,eAJmB;AAAA,sBAINxB,GAJM;AAAA;AAAA,cAIQkB,uBAAayB,OAAb,CAAqB,EAAEpC,OAAO,EAAEgC,IAAIxC,IAAI6C,MAAJ,CAAWL,EAAjB,EAAT,EAArB,CAJR;;AAAA;AAAA;;AAAA,oBAIbM,MAJa,kCAID,CAJC;;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAOnBrB,uBAAMC,OAAN,CAAczB,GAAd,EAAmB,GAAnB,EAAwB,QAAxB,EAAkC,EAAlC,EAAsC,GAAtC;;AAPmB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAArB;;AAAA;AAAA;AAAA;AAAA;;AAWG;AACHH,KAAI6C,GAAJ,CAAQ,aAAR;AAAA,uFAAuB,kBAAO3C,GAAP,EAAYC,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAKrBwB,eALqB;AAAA,sBAKRxB,GALQ;AAAA;AAAA,cAKMkB,uBAAayB,OAAb,CAAqB,EAAEpC,OAAO,EAAEgC,IAAIxC,IAAI6C,MAAJ,CAAWL,EAAjB,EAAT,EAArB,CALN;;AAAA;AAAA;;AAAA,oBAKfM,MALe,kCAKH,CALG;;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAQrBrB,uBAAMC,OAAN,CAAczB,GAAd,EAAmB,GAAnB,EAAwB,QAAxB,EAAkC,EAAlC,EAAsC,GAAtC;;AARqB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAvB;;AAAA;AAAA;AAAA;AAAA;;AAYA;AACAH,KAAIC,GAAJ,CAAQ,2BAAR;AAAA,wFAAqC,kBAAOC,GAAP,EAAYC,GAAZ;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAI/B8C,UAJ+B,GAIzB,mBAJyB;;;AAMnC,WAAI/C,IAAI6C,MAAJ,CAAWG,IAAX,IAAmB,CAAvB,EAA0B;AACzB,YAAIhD,IAAII,KAAJ,CAAU6C,WAAd,EAA2BF,MAAM,iDAAiD/C,IAAI6C,MAAJ,CAAWK,UAA5D,GAAyE,OAAzE,GAAmFlD,IAAII,KAAJ,CAAU6C,WAA7F,GAA2G,GAAjH;AAC3B,YAAIjD,IAAII,KAAJ,CAAU+C,SAAd,EAAyBJ,MAAM,iDAAiD/C,IAAI6C,MAAJ,CAAWK,UAA5D,GAAyE,OAAzE,GAAmFlD,IAAII,KAAJ,CAAU+C,SAA7F,GAAyG,GAA/G;;AAEzB,YAAInD,IAAII,KAAJ,CAAU6C,WAAV,IAAyBjD,IAAII,KAAJ,CAAU+C,SAAvC,EAAkD;AACjDJ,eAAM,iDAAiD/C,IAAI6C,MAAJ,CAAWK,UAA5D,GAAyE,OAAzE,GAAmFlD,IAAII,KAAJ,CAAU6C,WAA7F,GAA2G,QAA3G,GAAsHjD,IAAI6C,MAAJ,CAAWK,UAAjI,GAA8I,OAA9I,GAAwJlD,IAAII,KAAJ,CAAU+C,SAAlK,GAA8K,GAApL;AACA;AACD;;AAED,WAAInD,IAAI6C,MAAJ,CAAWG,IAAX,IAAmB,CAAvB,EAA0B;AACzB,YAAIhD,IAAII,KAAJ,CAAU6C,WAAd,EAA2B;AACtBG,oBADsB,GACRC,eAAKC,iBAAL,CAAuB,IAAIC,OAAOvD,IAAII,KAAJ,CAAU6C,WAAjB,CAA3B,EAA0D,YAA1D,CADQ;;AAE1BF,eAAM,iDAAiD/C,IAAI6C,MAAJ,CAAWK,UAA5D,GAAyE,OAAzE,GAAmFE,WAAnF,GAAiG,GAAvG;AACA;AACD,YAAIpD,IAAII,KAAJ,CAAU+C,SAAd,EAAyB;AACpBK,kBADoB,GACRH,eAAKC,iBAAL,CAAuBtD,IAAII,KAAJ,CAAU+C,SAAjC,EAA4C,YAA5C,CADQ;;AAExBJ,eAAM,iDAAiD/C,IAAI6C,MAAJ,CAAWK,UAA5D,GAAyE,OAAzE,GAAmFM,SAAnF,GAA+F,GAArG;AACA;;AAED,YAAIxD,IAAII,KAAJ,CAAU6C,WAAV,IAAyBjD,IAAII,KAAJ,CAAU+C,SAAvC,EAAkD;AAC7CC,qBAD6C,GAC/BC,eAAKC,iBAAL,CAAuB,IAAIC,OAAOvD,IAAII,KAAJ,CAAU6C,WAAjB,CAA3B,EAA0D,YAA1D,CAD+B;AAE7CO,mBAF6C,GAEjCH,eAAKC,iBAAL,CAAuBtD,IAAII,KAAJ,CAAU+C,SAAjC,EAA4C,YAA5C,CAFiC;;AAGjDJ,eAAM,iDAAiD/C,IAAI6C,MAAJ,CAAWK,UAA5D,GAAyE,OAAzE,GAAmFE,YAAnF,GAAiG,QAAjG,GAA4GpD,IAAI6C,MAAJ,CAAWK,UAAvH,GAAoI,OAApI,GAA8IM,UAA9I,GAA0J,GAAhK;AACA;AACD;;AA9BkC;AAAA,cAgCbC,oBAAUrD,KAAV,CAAgB2C,GAAhB,EAAqB;AAC1CW,eAAO,IADmC;AAE1CC,aAAK,IAFqC;AAG1CX,cAAMY,sBAAWC;AAHyB,QAArB,CAhCa;;AAAA;AAgC7BC,cAhC6B;;;AAsCnCrC,uBAAMsC,KAAN,CAAY9D,GAAZ,EAAiB,CAAjB,EAAoB6D,QAAQC,KAA5B;AAtCmC;AAAA;;AAAA;AAAA;AAAA;;AAwCnCtC,uBAAMC,OAAN,CAAczB,GAAd,EAAmB,GAAnB,EAAwB,QAAxB,EAAkC,EAAlC,EAAsC,GAAtC;;AAxCmC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAArC;;AAAA;AAAA;AAAA;AAAA;;AA4CA;AACAH,KAAIC,GAAJ,CAAQ,oBAAR;AAAA,wFAA8B,mBAAOC,GAAP,EAAYC,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIxB8C,UAJwB,GAIlB,EAJkB;AAKxBG,iBALwB,GAKXlD,IAAI6C,MAAJ,CAAWK,UALA;AAMxB1C,YANwB,GAMhB,eANgB;;AAO5BuC,aAAM,+BAA+BG,UAA/B,GAA4C,gBAA5C,GAA+D1C,KAA/D,GAAuE,YAAvE,GAAsF0C,UAAtF,GAAmG,WAAzG;AAP4B,uBAQ5BzB,eAR4B;AAAA,uBAQfxB,GARe;AAAA;AAAA,cAQDwD,oBAAUrD,KAAV,CAAgB2C,GAAhB,EAAqB;AAC/CW,eAAO,KADwC;AAE/CC,aAAK,IAF0C;AAG/CX,cAAMY,sBAAWC;AAH8B,QAArB,CARC;;AAAA;AAAA;;AAAA,qBAQtBf,MARsB,oCAQV,CARU;;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAe5BrB,uBAAMC,OAAN,CAAczB,GAAd,EAAmB,GAAnB,EAAwB,QAAxB,EAAkC,EAAlC,EAAsC,GAAtC;;AAf4B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAA9B;;AAAA;AAAA;AAAA;AAAA;;AAmBA;AACAH,KAAIC,GAAJ,CAAQ,kCAAR;AAAA,wFAA4C,mBAAOC,GAAP,EAAYC,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAItC8C,UAJsC,GAIhC,EAJgC;AAKtCiB,kBALsC,GAKxBhE,IAAI6C,MAAJ,CAAWmB,WALa;AAMtCC,kBANsC,GAMxBjE,IAAI6C,MAAJ,CAAWoB,WANa;AAOtCzD,YAPsC,GAO9B,eAP8B;;;AAS1CuC,aAAM,YAAYiB,WAAZ,GAA0B,QAA1B,GAAqCC,WAArC,GAAmD,0BAAnD,GAAgFzD,KAAhF,GAAwF,YAAxF,GAAuGwD,WAAvG,GAAqH,gBAA3H;;AAT0C,uBAW1CvC,eAX0C;AAAA,uBAW7BxB,GAX6B;AAAA;AAAA,cAWfwD,oBAAUrD,KAAV,CAAgB2C,GAAhB,EAAqB;AAC/CW,eAAO,KADwC;AAE/CC,aAAK,IAF0C;AAG/CX,cAAMY,sBAAWC;AAH8B,QAArB,CAXe;;AAAA;AAAA;;AAAA,qBAWpCf,MAXoC,oCAWxB,CAXwB;;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAkB1CrB,uBAAMC,OAAN,CAAczB,GAAd,EAAmB,GAAnB,EAAwB,QAAxB,EAAkC,EAAlC,EAAsC,GAAtC;;AAlB0C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAA5C;;AAAA;AAAA;AAAA;AAAA;;AAsBA;AACAH,KAAIC,GAAJ,CAAQ,gDAAR;AAAA,wFAA0D,mBAAOC,GAAP,EAAYC,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIpD8C,UAJoD,GAI9C,EAJ8C;AAKpDiB,kBALoD,GAKtChE,IAAI6C,MAAJ,CAAWmB,WAL2B;AAMpDC,kBANoD,GAMtCjE,IAAI6C,MAAJ,CAAWoB,WAN2B;AAOpDC,mBAPoD,GAOrClE,IAAI6C,MAAJ,CAAWqB,YAP0B;AAQpDC,gBARoD,GAQxC,SARwC;AASpD3D,YAToD,GAS5C,eAT4C;;;AAW/C,WAAIZ,OAAOwE,YAAP,CAAoBC,MAApB,CAA2BC,WAA3B,MAA4C,OAAhD,EAAyD;AACrD,YAAIJ,gBAAgB,GAApB,EACInB,MAAM,wBAAwBiB,WAAxB,GAAsC,gBAAtC,GAAyDA,WAAzD,GAAuE,QAAvE,GAAkFC,WAAlF,GAAgG,eAAhG,GAAkHE,SAAlH,GAA8H3D,KAA9H,GAAsI,wBAAtI,GAAiKwD,WAAjK,GAA+K,wBAArL;AACJ,YAAIE,gBAAgB,GAApB,EACInB,MAAM,wBAAwBiB,WAAxB,GAAsC,aAAtC,GAAsDA,WAAtD,GAAoE,QAApE,GAA+EC,WAA/E,GAA6F,eAA7F,GAA+GE,SAA/G,GAA2H3D,KAA3H,GAAmI,wBAAnI,GAA8JwD,WAA9J,GAA4K,sBAAlL;AACJ,YAAIE,gBAAgB,GAApB,EACInB,MAAM,wBAAwBiB,WAAxB,GAAsC,UAAtC,GAAmDA,WAAnD,GAAiE,QAAjE,GAA4EC,WAA5E,GAA0F,eAA1F,GAA4GE,SAA5G,GAAwH3D,KAAxH,GAAgI,wBAAhI,GAA2JwD,WAA3J,GAAyK,mBAA/K;AACP,QAPD,MAOO;AACH,YAAIE,gBAAgB,GAApB,EACInB,MAAM,oCAAoCiB,WAApC,GAAkD,SAAlD,GAA8DA,WAA9D,GAA4E,QAA5E,GAAuFC,WAAvF,GAAqG,eAArG,GAAuHE,SAAvH,GAAmI3D,KAAnI,GAA2I,oCAA3I,GAAkLwD,WAAlL,GAAgM,kBAAtM;AACJ,YAAIE,gBAAgB,GAApB,EACInB,MAAM,mCAAmCiB,WAAnC,GAAiD,SAAjD,GAA6DA,WAA7D,GAA2E,QAA3E,GAAsFC,WAAtF,GAAoG,eAApG,GAAsHE,SAAtH,GAAkI3D,KAAlI,GAA0I,mCAA1I,GAAgLwD,WAAhL,GAA8L,kBAApM;AACJ,YAAIE,gBAAgB,GAApB,EACInB,MAAM,mCAAmCiB,WAAnC,GAAiD,SAAjD,GAA6DA,WAA7D,GAA2E,QAA3E,GAAsFC,WAAtF,GAAoG,eAApG,GAAsHE,SAAtH,GAAkI3D,KAAlI,GAA0I,mCAA1I,GAAgLwD,WAAhL,GAA8L,kBAApM;AACP;AAzB8C,uBA0BxDvC,eA1BwD;AAAA,uBA0B3CxB,GA1B2C;AAAA;AAAA,cA0B7BwD,oBAAUrD,KAAV,CAAgB2C,GAAhB,EAAqB;AAC/CW,eAAO,KADwC;AAE/CC,aAAK,IAF0C;AAG/CX,cAAMY,sBAAWC;AAH8B,QAArB,CA1B6B;;AAAA;AAAA;;AAAA,qBA0BlDf,MA1BkD,oCA0BtC,CA1BsC;;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAiCxDrB,uBAAMC,OAAN,CAAczB,GAAd,EAAmB,GAAnB,EAAwB,QAAxB,EAAkC,EAAlC,EAAsC,GAAtC;;AAjCwD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAA1D;;AAAA;AAAA;AAAA;AAAA;;AAqCA,QAAOH,GAAP;AACA,C","file":"Aboutus.js","sourcesContent":["import { Router } from 'express'\r\nimport {  Op, QueryTypes } from 'sequelize'\r\nimport sequelize from '../models/sequelize'\r\nimport toRes from '../lib/toRes'\r\nimport AboutusModel from '../models/AboutusModel'\r\nimport util from '../lib/util'\r\nimport jwt from 'jsonwebtoken'\r\n\r\nexport default ({ config, db }) => {\r\n\tlet api = Router()\r\n\r\n\t// 分页接口（后端）\r\n\tapi.get('/page', async (req, res) => {\r\n\r\n\t\ttry {\r\n\r\n\t\t\tlet page = parseInt(req.query.page) || 1\r\n\t\t\tlet limit = parseInt(req.query.limit) || 10\r\n\t\t\tlet sort = req.query.sort || 'id'\r\n\t\t\tlet order = req.query.order || 'asc'\r\n\r\n\t\t\tlet where = {}\r\n\t\t\tlet title = req.query.title\r\n\t\t\tif (title) {\r\n\r\n\t\t\t\tif (title.indexOf('%') != -1) {\r\n\t\t\t\t\twhere.title = {\r\n\t\t\t\t\t\t[Op.like]: title\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\twhere.title = {\r\n\t\t\t\t\t\t[Op.eq]: title\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tlet subtitle = req.query.subtitle\r\n\t\t\tif (subtitle) {\r\n\r\n\t\t\t\tif (subtitle.indexOf('%') != -1) {\r\n\t\t\t\t\twhere.subtitle = {\r\n\t\t\t\t\t\t[Op.like]: subtitle\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\twhere.subtitle = {\r\n\t\t\t\t\t\t[Op.eq]: subtitle\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tlet content = req.query.content\r\n\t\t\tif (content) {\r\n\r\n\t\t\t\tif (content.indexOf('%') != -1) {\r\n\t\t\t\t\twhere.content = {\r\n\t\t\t\t\t\t[Op.like]: content\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\twhere.content = {\r\n\t\t\t\t\t\t[Op.eq]: content\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tlet picture1 = req.query.picture1\r\n\t\t\tif (picture1) {\r\n\r\n\t\t\t\tif (picture1.indexOf('%') != -1) {\r\n\t\t\t\t\twhere.picture1 = {\r\n\t\t\t\t\t\t[Op.like]: picture1\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\twhere.picture1 = {\r\n\t\t\t\t\t\t[Op.eq]: picture1\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tlet picture2 = req.query.picture2\r\n\t\t\tif (picture2) {\r\n\r\n\t\t\t\tif (picture2.indexOf('%') != -1) {\r\n\t\t\t\t\twhere.picture2 = {\r\n\t\t\t\t\t\t[Op.like]: picture2\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\twhere.picture2 = {\r\n\t\t\t\t\t\t[Op.eq]: picture2\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tlet picture3 = req.query.picture3\r\n\t\t\tif (picture3) {\r\n\r\n\t\t\t\tif (picture3.indexOf('%') != -1) {\r\n\t\t\t\t\twhere.picture3 = {\r\n\t\t\t\t\t\t[Op.like]: picture3\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\twhere.picture3 = {\r\n\t\t\t\t\t\t[Op.eq]: picture3\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tlet result = await AboutusModel.findAndCountAll({\r\n\t\t\t\torder: [[sort, order]],\r\n\t\t\t\twhere,\r\n\t\t\t\toffset: (page - 1) * limit,\r\n\t\t\t\tlimit\r\n\t\t\t})\r\n\t\t\t\r\n\t\t\tresult.currPage = page\r\n\t\t\tresult.pageSize = limit\r\n\r\n\t\t\ttoRes.page(res, 0, result)\r\n\t\t} catch(err) {\r\n\r\n\t\t\ttoRes.session(res, 500, '服务器错误！', '', 500)\r\n\t\t}\r\n\t})\r\n\r\n    // 分页接口（前端）\r\n\tapi.get('/list', async (req, res) => {\r\n\r\n\t\ttry {\r\n\r\n\t\t\tlet page = parseInt(req.query.page) || 1\r\n\t\t\tlet limit = parseInt(req.query.limit) || 10\r\n\t\t\tlet sort = req.query.sort || 'id'\r\n\t\t\tlet order = req.query.order || 'asc'\r\n\r\n\t\t\tlet where = {}\r\n\t\t\tlet title = req.query.title\r\n\t\t\tif (title) {\r\n\r\n\t\t\t\tif (title.indexOf('%') != -1) {\r\n\t\t\t\t\twhere.title = {\r\n\t\t\t\t\t\t[Op.like]: title\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\twhere.title = {\r\n\t\t\t\t\t\t[Op.eq]: title\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\r\n\t\t\tlet result = await AboutusModel.findAndCountAll({\r\n\t\t\t\torder: [[sort, order]],\r\n\t\t\t\twhere,\r\n\t\t\t\toffset: (page - 1) * limit,\r\n\t\t\t\tlimit\r\n\t\t\t})\r\n\t\t\t\r\n\t\t\tresult.currPage = page\r\n\t\t\tresult.pageSize = limit\r\n\r\n\t\t\ttoRes.page(res, 0, result)\r\n\t\t} catch(err) {\r\n\t\t\t\r\n\t\t\ttoRes.session(res, 401, '您的权限不够！', '', 200)\r\n\t\t}\r\n\t})\r\n\r\n\r\n\t// 保存接口（后端）\r\n\tapi.post('/save', async (req, res) => {\r\n\r\n\t\ttry {\r\n\r\n\t\t\tObject.keys(req.body).forEach(item=>{\r\n\t\t\t\tif(req.body[item] == '')  delete req.body[item]\r\n\t\t\t})\r\n\r\n\t\t\tconst userinfo = await AboutusModel.create(req.body)\r\n\r\n\t\t\tif (userinfo === null) {\r\n\t\t\t\ttoRes.session(res, -1, '添加失败！')\r\n\t\t\t} else {\r\n\t\t\t\ttoRes.session(res, 0, '添加成功！')\r\n\t\t\t}\r\n\t\t} catch(err) {\r\n\t\t\ttoRes.session(res, 500, '服务器错误！', '', 500)\r\n\t\t}\r\n\t})\r\n\r\n    // 保存接口（前端）\r\n\tapi.post('/add', async (req, res) => {\r\n\r\n\t\ttry {\r\n\r\n\t\t\tObject.keys(req.body).forEach(item=>{\r\n\t\t\t\tif(req.body[item] == '')  delete req.body[item]\r\n\t\t\t})\r\n\r\n\t\t\tif (jwt.decode(req.headers.token) == null) {//没有token，就是没登录\r\n\t\t\t\ttoRes.session(res, 401, '请登录后再操作', '', 401)\r\n\t\t\t}\r\n\r\n\t\t\tconst userinfo = await AboutusModel.create(req.body)\r\n\r\n\t\t\tif (userinfo === null) {\r\n\t\t\t\ttoRes.session(res, -1, '添加失败！')\r\n\t\t\t} else {\r\n\t\t\t\ttoRes.session(res, 0, '添加成功！')\r\n\t\t\t}\r\n\t\t} catch(err) {\r\n\t\t\ttoRes.session(res, 500, '服务器错误！', '', 500)\r\n\t\t}\r\n\t})\r\n\r\n\t// 更新接口\r\n\tapi.post('/update', async (req, res) => {\r\n\r\n\t\ttry {\r\n\t\t\tawait AboutusModel.update(req.body, {\r\n\t\t\t\twhere: {\r\n\t\t\t\t  id: req.body.id || 0\r\n\t\t\t\t}\r\n\t\t\t})\r\n\r\n\t\t\ttoRes.session(res, 0, '编辑成功！')\r\n\t\t} catch(err) {\r\n\t\t\ttoRes.session(res, 500, '服务器错误！', '', 500)\r\n\t\t}\r\n\t})\r\n\r\n\t// 删除接口\r\n\tapi.post('/delete', async (req, res) => {\r\n\r\n\t\ttry {\r\n\r\n\t\t\tawait AboutusModel.destroy({\r\n\t\t\t\twhere: {\r\n\t\t\t\t  id: {\r\n\t\t\t\t\t[Op.in]: req.body\r\n\t\t\t\t  }\r\n\t\t\t\t}\r\n\t\t\t})\r\n\r\n\t\t\ttoRes.session(res, 0, '删除成功！')\r\n\t\t} catch(err) {\r\n\t\t\ttoRes.session(res, 500, '服务器错误！', '', 500)\r\n\t\t}\r\n\t})\r\n\r\n\t// 详情接口（后端）\r\n\tapi.all('/info/:id', async (req, res) => {\r\n\r\n\t\ttry {\r\n\r\n\t\t\ttoRes.record(res, 0, await AboutusModel.findOne({ where: { id: req.params.id } }))\r\n\t\t} catch(err) {\r\n\r\n\t\t\ttoRes.session(res, 500, '服务器错误！', '', 500)\r\n\t\t}\r\n\t})\r\n\r\n    // 详情接口（前端）\r\n\tapi.all('/detail/:id', async (req, res) => {\r\n\r\n\t\ttry {\r\n\r\n\r\n\t\t\ttoRes.record(res, 0, await AboutusModel.findOne({ where: { id: req.params.id } }))\r\n\t\t} catch(err) {\r\n\r\n\t\t\ttoRes.session(res, 500, '服务器错误！', '', 500)\r\n\t\t}\r\n\t})\r\n\r\n\t// 获取需要提醒的记录数接口\r\n\tapi.get('/remind/:columnName/:type', async (req, res) => {\r\n\r\n\t\ttry {\r\n\r\n\t\t\tlet sql = 'SELECT 0 AS count'\r\n\t\t\t\r\n\t\t\tif (req.params.type == 1) {\r\n\t\t\t\tif (req.query.remindstart) sql = \"SELECT COUNT(*) AS count FROM aboutus WHERE \" + req.params.columnName + \" >= '\" + req.query.remindstart + \"'\"\r\n\t\t\t\tif (req.query.remindend) sql = \"SELECT COUNT(*) AS count FROM aboutus WHERE \" + req.params.columnName + \" <= '\" + req.query.remindend + \"'\"\r\n\r\n\t\t\t\tif (req.query.remindstart && req.query.remindend) {\r\n\t\t\t\t\tsql = \"SELECT COUNT(*) AS count FROM aboutus WHERE \" + req.params.columnName + \" >= '\" + req.query.remindstart + \"' AND \" + req.params.columnName + \" <= '\" + req.query.remindend + \"'\"\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (req.params.type == 2) {\r\n\t\t\t\tif (req.query.remindstart) {\r\n\t\t\t\t\tlet remindStart = util.getDateTimeFormat(0 + Number(req.query.remindstart), \"yyyy-MM-dd\")\r\n\t\t\t\t\tsql = \"SELECT COUNT(*) AS count FROM aboutus WHERE \" + req.params.columnName + \" >= '\" + remindStart + \"'\"\r\n\t\t\t\t}\r\n\t\t\t\tif (req.query.remindend) {\r\n\t\t\t\t\tlet remindEnd = util.getDateTimeFormat(req.query.remindend, \"yyyy-MM-dd\")\r\n\t\t\t\t\tsql = \"SELECT COUNT(*) AS count FROM aboutus WHERE \" + req.params.columnName + \" <= '\" + remindEnd + \"'\"\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (req.query.remindstart && req.query.remindend) {\r\n\t\t\t\t\tlet remindStart = util.getDateTimeFormat(0 + Number(req.query.remindstart), \"yyyy-MM-dd\")\r\n\t\t\t\t\tlet remindEnd = util.getDateTimeFormat(req.query.remindend, \"yyyy-MM-dd\")\r\n\t\t\t\t\tsql = \"SELECT COUNT(*) AS count FROM aboutus WHERE \" + req.params.columnName + \" >= '\" + remindStart + \"' AND \" + req.params.columnName + \" <= '\" + remindEnd + \"'\"\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tconst results = await sequelize.query(sql, {\r\n\t\t\t\tplain: true,\r\n\t\t\t\traw: true,\r\n\t\t\t\ttype: QueryTypes.SELECT\r\n\t\t\t})\r\n\r\n\t\t\ttoRes.count(res, 0, results.count)\r\n\t\t} catch(err) {\r\n\t\t\ttoRes.session(res, 500, '服务器错误！', '', 500)\r\n\t\t}\r\n\t})\r\n\r\n\t// 分组统计接口\r\n\tapi.get('/group/:columnName', async (req, res) => {\r\n\r\n\t\ttry {\r\n\r\n\t\t\tlet sql = \"\"\r\n\t\t\tlet columnName = req.params.columnName\r\n\t\t\tlet where = \" WHERE 1 = 1 \"\r\n\t\t\tsql = \"SELECT COUNT(*) AS total, \" + columnName + \" FROM aboutus \" + where + \" GROUP BY \" + columnName + \" LIMIT 10\" \r\n\t\t\ttoRes.record(res, 0, await sequelize.query(sql, {\r\n\t\t\t\tplain: false,\r\n\t\t\t\traw: true,\r\n\t\t\t\ttype: QueryTypes.SELECT\r\n\t\t\t}))\r\n\t\t} catch(err) {\r\n\r\n\t\t\ttoRes.session(res, 500, '服务器错误！', '', 500)\r\n\t\t}\r\n\t})\r\n\r\n\t// 统计指定字段\r\n\tapi.get('/value/:xColumnName/:yColumnName', async (req, res) => {\r\n\r\n\t\ttry {\r\n\r\n\t\t\tlet sql = \"\"\r\n\t\t\tlet xColumnName = req.params.xColumnName\r\n\t\t\tlet yColumnName = req.params.yColumnName\r\n\t\t\tlet where = \" WHERE 1 = 1 \"\r\n\t\t\t\r\n\t\t\tsql = \"SELECT \" + xColumnName + \", SUM(\" + yColumnName + \") AS total FROM aboutus \" + where + \" GROUP BY \" + xColumnName + \" DESC LIMIT 10\"\r\n\t\t\t\r\n\t\t\ttoRes.record(res, 0, await sequelize.query(sql, {\r\n\t\t\t\tplain: false,\r\n\t\t\t\traw: true,\r\n\t\t\t\ttype: QueryTypes.SELECT\r\n\t\t\t}))\r\n\t\t} catch(err) {\r\n\r\n\t\t\ttoRes.session(res, 500, '服务器错误！', '', 500)\r\n\t\t}\r\n\t})\r\n\r\n\t// 按日期统计\r\n\tapi.get('/value/:xColumnName/:yColumnName/:timeStatType', async (req, res) => {\r\n\r\n\t\ttry {\r\n\t\t\t\r\n\t\t\tlet sql = \"\"\r\n\t\t\tlet xColumnName = req.params.xColumnName\r\n\t\t\tlet yColumnName = req.params.yColumnName\r\n\t\t\tlet timeStatType = req.params.timeStatType\r\n\t\t\tlet tableName = \"aboutus\"\r\n\t\t\tlet where = \" WHERE 1 = 1 \"\r\n\t\t\r\n            if (config.dbConnection.dbtype.toLowerCase() == \"mysql\") {\r\n                if (timeStatType == \"日\")\r\n                    sql = \"SELECT DATE_FORMAT(\" + xColumnName + \", '%Y-%m-%d') \" + xColumnName + \", sum(\" + yColumnName + \") total FROM \" + tableName + where + \" GROUP BY DATE_FORMAT(\" + xColumnName + \", '%Y-%m-%d') LIMIT 10\";\r\n                if (timeStatType == \"月\")\r\n                    sql = \"SELECT DATE_FORMAT(\" + xColumnName + \", '%Y-%m') \" + xColumnName + \", sum(\" + yColumnName + \") total FROM \" + tableName + where + \" GROUP BY DATE_FORMAT(\" + xColumnName + \", '%Y-%m')  LIMIT 10\";\r\n                if (timeStatType == \"年\")\r\n                    sql = \"SELECT DATE_FORMAT(\" + xColumnName + \", '%Y') \" + xColumnName + \", sum(\" + yColumnName + \") total FROM \" + tableName + where + \" GROUP BY DATE_FORMAT(\" + xColumnName + \", '%Y')  LIMIT 10\";\r\n            } else {\r\n                if (timeStatType == \"日\")\r\n                    sql = \"SELECT DATE_FORMAT(VARCHAR(10),\" + xColumnName + \", 120) \" + xColumnName + \", sum(\" + yColumnName + \") total FROM \" + tableName + where + \" GROUP BY DATE_FORMAT(VARCHAR(10),\" + xColumnName + \", 120)  LIMIT 10\";\r\n                if (timeStatType == \"月\")\r\n                    sql = \"SELECT DATE_FORMAT(VARCHAR(7),\" + xColumnName + \", 120) \" + xColumnName + \", sum(\" + yColumnName + \") total FROM \" + tableName + where + \" GROUP BY DATE_FORMAT(VARCHAR(7),\" + xColumnName + \", 120)  LIMIT 10\";\r\n                if (timeStatType == \"年\")\r\n                    sql = \"SELECT DATE_FORMAT(VARCHAR(4),\" + xColumnName + \", 120) \" + xColumnName + \", sum(\" + yColumnName + \") total FROM \" + tableName + where + \" GROUP BY DATE_FORMAT(VARCHAR(4),\" + xColumnName + \", 120)  LIMIT 10\";\r\n            }\r\n\t\t\ttoRes.record(res, 0, await sequelize.query(sql, {\r\n\t\t\t\tplain: false,\r\n\t\t\t\traw: true,\r\n\t\t\t\ttype: QueryTypes.SELECT\r\n\t\t\t}))\r\n\t\t} catch(err) {\r\n\r\n\t\t\ttoRes.session(res, 500, '服务器错误！', '', 500)\r\n\t\t}\r\n\t})\r\n\r\n\treturn api\r\n}\r\n"]}