{"version":3,"sources":["../../src/api/Common.js"],"names":["config","db","api","get","req","res","where","query","conditionColumn","undefined","conditionValue","sequelize","params","columnName","tableName","plain","raw","type","QueryTypes","SELECT","results","result","length","forEach","push","item","toRes","record","session","columnValue","sfsh","body","id","sql","remindstart","remindend","remindStart","util","getDateTimeFormat","remindEnd","count","columns","split","userInfo","jwt","decode","headers","token","role","column","loginUserColumn","username","xColumnName","yColumnName","timeStatType"],"mappings":"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D;AAAA;AAAA,cAiCxCM,oBAAUJ,KAAV,CAAgB0B,GAAhB,EAAqB;AAC/ClB,eAAO,KADwC;AAE/CC,aAAK,IAF0C;AAG/CC,cAAMC,sBAAWC;AAH8B,QAArB,CAjCwC;;AAAA;AAAA;;AAAA,oBAiC7DQ,MAjC6D,kCAiCjD,CAjCiD;;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAwCnED,uBAAME,OAAN,CAAcvB,GAAd,EAAmB,GAAnB,gBAA6B,EAA7B,EAAiC,GAAjC;;AAxCmE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAArE;;AAAA;AAAA;AAAA;AAAA;;AA4CA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;AAIA,QAAOH,GAAP;AACA,C","file":"Common.js","sourcesContent":["import { Router } from 'express'\nimport { QueryTypes } from 'sequelize'\nimport toRes from '../lib/toRes'\nimport sequelize from '../models/sequelize'\nimport util from '../lib/util'\nimport ConfigModel from '../models/ConfigModel'\nimport https from 'https'\nimport qs from 'querystring'\nimport path from 'path'\nimport fs from 'fs'\nimport request from 'request'\nimport jwt from 'jsonwebtoken'\n\nexport default ({ config, db }) => {\n\tlet api = Router()\n\n\t// 获取某表的某个字段列表接口\n\tapi.get('/option/:tableName/:columnName', async (req, res) => {\n\n\t\ttry {\n\n\t\t\tlet where = ' WHERE 1 = 1 '\n\t\t\tif(req.query.conditionColumn != undefined && req.query.conditionValue != undefined) {\n\t\t\t\twhere += ` AND ${req.query.conditionColumn} = '${req.query.conditionValue}'`\n\t\t\t}\n\n\t\t\tconst results = await sequelize.query(`SELECT ${req.params.columnName} FROM ${req.params.tableName} ${where}`, {\n\t\t\t\tplain: false,\n\t\t\t\traw: true,\n\t\t\t\ttype: QueryTypes.SELECT\n\t\t\t})\n\n\t\t\tlet result = []\n\t\t\tif (results.length > 0) {\n\t\t\t\tresults.forEach(item => {\n\t\t\t\t\tresult.push(item[req.params.columnName])\n\t\t\t\t})\n\t\t\t}\n\n\t\t\ttoRes.record(res, 0, result)\n\t\t} catch(err) {\n\n\t\t\ttoRes.session(res, 500, '服务器错误！', '', 500)\n\t\t}\n\t})\n\n\t// 获取某表的单行记录接口\n\tapi.get('/follow/:tableName/:columnName', async (req, res) => {\n\n\t\ttry {\n\n\t\t\ttoRes.record(res, 0, await sequelize.query(`SELECT * FROM ${req.params.tableName} WHERE ${req.params.columnName} = '${req.query.columnValue}'`, {\n\t\t\t\tplain: true,\n\t\t\t\traw: true,\n\t\t\t\ttype: QueryTypes.SELECT\n\t\t\t}))\n\t\t} catch(err) {\n\t\t\t\n\t\t\ttoRes.session(res, 500, '服务器错误！', '', 500)\n\t\t}\n\t})\n\n\t// 修改某表的sfsh状态接口\n\tapi.get('/sh/:tableName', async (req, res) => {\n\n\t\ttry {\n\t\t\t\n\t\t\tlet sfsh = req.body.sfsh === '是' ? '否' : '是'\n\t\t\tawait sequelize.query(`UPDATE ${req.params.tableName} SET sfsh = ${sfsh} WHERE id = ${req.body.id}`)\n\n\t\t\ttoRes.session(res, 0, '编辑成功！')\n\t\t} catch(err) {\n\n\t\t\ttoRes.session(res, 500, '服务器错误！', '', 500)\n\t\t}\n\t})\n\n\t// 获取需要提醒的记录数接口\n\tapi.get('/remind/:tableName/:columnName/:type', async (req, res) => {\n\n\t\ttry {\n\n\t\t\tlet sql = 'SELECT 0 AS count'\n\t\t\t\n\t\t\tif (req.params.type == 1) {\n\t\t\t\tif (req.query.remindstart) sql = `SELECT COUNT(*) AS count FROM ${req.params.tableName} WHERE ${req.params.columnName} >= ${req.query.remindstart}`\n\t\t\t\tif (req.query.remindend) sql = `SELECT COUNT(*) AS count FROM ${req.params.tableName} WHERE ${req.params.columnName} <= ${req.query.remindend}`\n\t\t\t}\n\n\t\t\tif (req.params.type == 2) {\n\t\t\t\tif (req.query.remindstart) {\n\t\t\t\t\tlet remindStart = util.getDateTimeFormat(0 - req.query.remindstart, \"yyyy-MM-dd\")\n\t\t\t\t\tsql = `SELECT COUNT(*) AS count FROM ${req.params.tableName} WHERE ${req.params.columnName} >= '${remindStart}'`\n\t\t\t\t}\n\t\t\t\tif (req.query.remindend) {\n\t\t\t\t\tlet remindEnd = util.getDateTimeFormat(req.query.remindend, \"yyyy-MM-dd\")\n\t\t\t\t\tsql = `SELECT COUNT(*) AS count FROM ${req.params.tableName} WHERE ${req.params.columnName} <= '${remindEnd}'`\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst results = await sequelize.query(sql, {\n\t\t\t\tplain: true,\n\t\t\t\traw: true,\n\t\t\t\ttype: QueryTypes.SELECT\n\t\t\t})\n\n\t\t\ttoRes.count(res, 0, results.count)\n\t\t} catch(err) {\n\t\t\t\n\t\t\ttoRes.session(res, 500, '服务器错误！', '', 500)\n\t\t}\n\t})\n\n\t// 计算规则接口\n\tapi.get('/cal/:tableName/:columnName', async (req, res) => {\n\n\t\ttry {\n\t\t\t\n\t\t\ttoRes.record(res, 0, await sequelize.query(`SELECT SUM(${req.params.columnName}) AS sum, MAX(${req.params.columnName}) AS max, MIN(${req.params.columnName}) AS min, AVG(${req.params.columnName}) AS avg FROM ${req.params.tableName}`, {\n\t\t\t\tplain: true,\n\t\t\t\traw: true,\n\t\t\t\ttype: QueryTypes.SELECT\n\t\t\t}))\n\t\t} catch(err) {\n\n\t\t\ttoRes.session(res, 500, '服务器错误！', '', 500)\n\t\t}\n\t})\n\n\t// 类别统计接口\n\tapi.get('/group/:tableName/:columnName', async (req, res) => {\n\n\t\ttry {\n\t\t\t\n\t\t\ttoRes.record(res, 0, await sequelize.query(`SELECT COUNT(*) AS total, ${req.params.columnName} FROM ${req.params.tableName} GROUP BY ${req.params.columnName}`, {\n\t\t\t\tplain: false,\n\t\t\t\traw: true,\n\t\t\t\ttype: QueryTypes.SELECT\n\t\t\t}))\n\t\t} catch(err) {\n\n\t\t\ttoRes.session(res, 500, '服务器错误！', '', 500)\n\t\t}\n\t})\n\n\t// 按值统计接口\n\tapi.get('/value/:tableName/:xColumnName/:yColumnName', async (req, res) => {\n\n\t\ttry {\n\n\t\t\tlet columns = await sequelize.query(`select group_concat(column_name) from information_schema.columns where table_name = '${req.params.tableName}'`, {\n\t\t\t\tplain: false,\n\t\t\t\traw: true,\n\t\t\t\ttype: QueryTypes.SELECT\n\t\t\t})\n\t\t\tcolumns = columns[0]['group_concat(column_name)'].split(',')\n\n\t\t\tlet where = ' where 1=1 '\n\t\t\tlet userInfo = jwt.decode(req.headers.token)\n\t\t\tif (userInfo.role != '管理员') {\n\t\t\t\tcolumns.forEach(column => {\n\t\t\t\t\tif (column == userInfo.loginUserColumn) {\n\t\t\t\t\t\twhere += ` and ${column} = '${userInfo.username}' `\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t}\n\t\t\t\n\t\t\ttoRes.record(res, 0, await sequelize.query(`SELECT ${req.params.xColumnName}, SUM(${req.params.yColumnName}) AS total FROM ${req.params.tableName} ${where} GROUP BY ${req.params.xColumnName}`, {\n\t\t\t\tplain: false,\n\t\t\t\traw: true,\n\t\t\t\ttype: QueryTypes.SELECT\n\t\t\t}))\n\t\t} catch(err) {\n\n\t\t\ttoRes.session(res, 500, '服务器错误！', '', 500)\n\t\t}\n\t})\n\n\tapi.get('/value/:tableName/:xColumnName/:yColumnName/:timeStatType', async (req, res) => {\n\n\t\ttry {\n\n\t\t\tlet columns = await sequelize.query(`select group_concat(column_name) from information_schema.columns where table_name = '${req.params.tableName}'`, {\n\t\t\t\tplain: false,\n\t\t\t\traw: true,\n\t\t\t\ttype: QueryTypes.SELECT\n\t\t\t})\n\t\t\tcolumns = columns[0]['group_concat(column_name)'].split(',')\n\n\t\t\tlet where = ' where 1=1 '\n\t\t\tlet userInfo = jwt.decode(req.headers.token)\n\t\t\tif (userInfo.role != '管理员') {\n\t\t\t\tcolumns.forEach(column => {\n\t\t\t\t\tif (column == userInfo.loginUserColumn) {\n\t\t\t\t\t\twhere += ` and ${column} = '${userInfo.username}' `\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t}\n\n\t\t\tlet sql = \"\"\n\t\t\tlet tableName = req.params.tableName\n\t\t\tlet xColumnName = req.params.xColumnName\n\t\t\tlet yColumnName = req.params.yColumnName\n\t\t\tlet timeStatType = req.params.timeStatType\n\t\t\tif (timeStatType == \"日\")\n\t\t\t\tsql = \"SELECT DATE_FORMAT(\" + xColumnName + \", '%Y-%m-%d') \" + xColumnName + \", sum(\" + yColumnName + \") total FROM \" + tableName + where + \" GROUP BY DATE_FORMAT(\" + xColumnName + \", '%Y-%m-%d')\";\n\t\t\tif (timeStatType == \"月\")\n\t\t\t\tsql = \"SELECT DATE_FORMAT(\" + xColumnName + \", '%Y-%m') \" + xColumnName + \", sum(\" + yColumnName + \") total FROM \" + tableName + where + \" GROUP BY DATE_FORMAT(\" + xColumnName + \", '%Y-%m')\";\n\t\t\tif (timeStatType == \"年\")\n\t\t\t\tsql = \"SELECT DATE_FORMAT(\" + xColumnName + \", '%Y') \" + xColumnName + \", sum(\" + yColumnName + \") total FROM \" + tableName + where + \" GROUP BY DATE_FORMAT(\" + xColumnName + \", '%Y')\";\n\n\t\t\ttoRes.record(res, 0, await sequelize.query(sql, {\n\t\t\t\tplain: false,\n\t\t\t\traw: true,\n\t\t\t\ttype: QueryTypes.SELECT\n\t\t\t}))\n\t\t} catch(err) {\n\n\t\t\ttoRes.session(res, 500, err, '', 500)\n\t\t}\n\t})\n\n\t// 人脸对比\n\t// api.get('/matchFace', async (req, res) => {\n\n\t// \ttry {\n\n\t// \t\tlet APIKeyInfo = await ConfigModel.findOne({ where: { name: 'APIKey' } })\n\t// \t\tlet SecretKeyInfo = await ConfigModel.findOne({ where: { name: 'SecretKey' } })\n\t// \t\tlet APIKey = APIKeyInfo.dataValues.value\n\t// \t\tlet SecretKey = SecretKeyInfo.dataValues.value\n\t\t\t\n\t// \t\tconst param = qs.stringify({\n\t// \t\t\t'grant_type': 'client_credentials',\n\t// \t\t\t'client_id': APIKey,\n\t// \t\t\t'client_secret': SecretKey\n\t// \t\t});\n\n\t// \t\tlet rawData = '';\n\t// \t\thttps.get(\n\t// \t\t\t{\n\t// \t\t\t\thostname: 'aip.baidubce.com',\n\t// \t\t\t\tpath: '/oauth/2.0/token?' + param,\n\t// \t\t\t\tagent: false\n\t// \t\t\t},\n\t// \t\t\tfunction (resc) {\n\t// \t\t\t\tresc.on('data', (chunk)=>{\n\t// \t\t\t\t\trawData += chunk;\n\t// \t\t\t\t});\n\n\t// \t\t\t\tresc.on('end',()=>{\n\t// \t\t\t\t\tlet rawDataObj = JSON.parse(rawData);\n\t// \t\t\t\t\tlet access_token = rawDataObj.access_token;\n\t// \t\t\t\t\tlet face1 = path.join(__dirname,'..','views','upload', req.query.face1)\n\t// \t\t\t\t\tlet face2 = path.join(__dirname,'..','views','upload', req.query.face2)\n\t\t\t\t\t\t\n\t// \t\t\t\t\tlet bitmap = fs.readFileSync(face1);\n\t// \t\t\t\t\tlet bitmap2 = fs.readFileSync(face2);\n\t// \t\t\t\t\tlet base64str1 = Buffer.from(bitmap, 'binary').toString('base64');\n\t// \t\t\t\t\tlet base64str2 = Buffer.from(bitmap2, 'binary').toString('base64');\n\n\t// \t\t\t\t\tlet reqParams = [\n\t// \t\t\t\t\t\t{\n\t// \t\t\t\t\t\t\t\t\"image\": base64str1,\n\t// \t\t\t\t\t\t\t\t\"image_type\": \"BASE64\",\n\t// \t\t\t\t\t\t\t\t\"face_type\": \"LIVE\",\n\t// \t\t\t\t\t\t\t\t\"quality_control\": \"LOW\",\n\t// \t\t\t\t\t\t\t\t\"liveness_control\": \"NONE\"\n\t// \t\t\t\t\t\t},\n\t// \t\t\t\t\t\t{\n\t// \t\t\t\t\t\t\t\t\"image\": base64str2,\n\t// \t\t\t\t\t\t\t\t\"image_type\": \"BASE64\",\n\t// \t\t\t\t\t\t\t\t\"face_type\": \"LIVE\",\n\t// \t\t\t\t\t\t\t\t\"quality_control\": \"LOW\",\n\t// \t\t\t\t\t\t\t\t\"liveness_control\": \"NONE\"\n\t// \t\t\t\t\t\t}\n\t// \t\t\t\t\t];\n\t// \t\t\t\t\trequest({\n\t// \t\t\t\t\t\turl: 'https://aip.baidubce.com/rest/2.0/face/v3/match?access_token=' + access_token,\n\t// \t\t\t\t\t\tmethod: \"POST\",\n\t// \t\t\t\t\t\tjson: true,\n\t// \t\t\t\t\t\theaders: {\n\t// \t\t\t\t\t\t\t\"content-type\": \"application/json\",\n\t// \t\t\t\t\t\t},\n\t// \t\t\t\t\t\tbody: reqParams\n\t// \t\t\t\t\t}, function(error, response, body) {\n\t// \t\t\t\t\t\tif (!error && response.statusCode == 200) {\n\t// \t\t\t\t\t\t\tres.status(200).json({\n\t// \t\t\t\t\t\t\t\tcode: 0,\n\t// \t\t\t\t\t\t\t\tscore: body.result ? body.result.score : 0\n\t// \t\t\t\t\t\t\t})\n\t// \t\t\t\t\t\t} else {\n\t// \t\t\t\t\t\t\tres.status(200).json({\n\t// \t\t\t\t\t\t\t\tcode: -1,\n\t// \t\t\t\t\t\t\t\tscore: 0\n\t// \t\t\t\t\t\t\t})\n\t// \t\t\t\t\t\t}\n\t// \t\t\t\t\t});\n\t// \t\t\t\t});\n\t// \t\t\t}\n\t// \t\t);\n\t// \t} catch(err) {\n\n\t// \t\ttoRes.session(res, 500, '服务器错误！', '', 500)\n\t// \t}\n\t// })\n\n\n\n\treturn api\n}\n"]}